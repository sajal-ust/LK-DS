# -*- coding: utf-8 -*-
"""gpt_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12hH_liruz5qYsQgJDfVH3vDAXdTlasfx
"""

import pandas as pd
import time
import os
import openai
from dotenv import load_dotenv
from sklearn.metrics import classification_report

# Commented out IPython magic to ensure Python compatibility.
%%writefile .env
OPENAI_API_KEY=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

#


# Load the .env file
load_dotenv()

# Get API key from .env
openai.api_key = os.getenv("OPENAI_API_KEY")

if not openai.api_key:
    raise ValueError("Error: OpenAI API key not found! Make sure the .env file is correctly loaded.")

def get_gpt_sentiment(text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            request_timeout=10,
            messages=[
                {"role": "system", "content": "Classify this text strictly as Positive or Negative only."},
                {"role": "user", "content": text}
            ]
        )
        sentiment = response['choices'][0]['message']['content'].strip().lower()
        return "Positive" if "positive" in sentiment else "Negative"
    except Exception as e:
        print(f"Error: {e}")
        return "Negative"

# Load Data
df = pd.read_csv("channel_partner_feedback.csv")  # Ensure it has 'text' and 'true_label' columns

# Analyze Sentiment for GPT (Add rate-limiting with sleep)
df["gpt_prediction"] = df["Feedback_Text"].apply(
    lambda x: (time.sleep(1), get_gpt_sentiment(x))[1]
)


# Print classification report
print("\n GPT Model Performance:")
print(classification_report(df["Sentiment"], df["gpt_prediction"]))

df
